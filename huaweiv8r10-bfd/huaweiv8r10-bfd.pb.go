// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: huaweiv8r10-bfd.proto

package huaweiv8r10_bfd

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Bfd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Bfd) Reset() {
	*x = Bfd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiv8r10_bfd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bfd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bfd) ProtoMessage() {}

func (x *Bfd) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiv8r10_bfd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bfd.ProtoReflect.Descriptor instead.
func (*Bfd) Descriptor() ([]byte, []int) {
	return file_huaweiv8r10_bfd_proto_rawDescGZIP(), []int{0}
}

type HwBfdPWSessDown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindType           string `protobuf:"bytes,1,opt,name=BindType,proto3" json:"BindType,omitempty"`
	Diagnosis          uint32 `protobuf:"varint,2,opt,name=Diagnosis,proto3" json:"Diagnosis,omitempty"`
	LocalDiscriminator uint32 `protobuf:"varint,3,opt,name=LocalDiscriminator,proto3" json:"LocalDiscriminator,omitempty"`
	PwId               uint32 `protobuf:"varint,4,opt,name=PwId,proto3" json:"PwId,omitempty"`
	PwSecondary        uint32 `protobuf:"varint,5,opt,name=PwSecondary,proto3" json:"PwSecondary,omitempty"`
	SessIndex          uint32 `protobuf:"varint,6,opt,name=SessIndex,proto3" json:"SessIndex,omitempty"`
	SessionName        string `protobuf:"bytes,7,opt,name=SessionName,proto3" json:"SessionName,omitempty"`
	VsiName            string `protobuf:"bytes,8,opt,name=VsiName,proto3" json:"VsiName,omitempty"`
	VsiPeerAddress     string `protobuf:"bytes,9,opt,name=VsiPeerAddress,proto3" json:"VsiPeerAddress,omitempty"`
}

func (x *HwBfdPWSessDown) Reset() {
	*x = HwBfdPWSessDown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiv8r10_bfd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwBfdPWSessDown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwBfdPWSessDown) ProtoMessage() {}

func (x *HwBfdPWSessDown) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiv8r10_bfd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwBfdPWSessDown.ProtoReflect.Descriptor instead.
func (*HwBfdPWSessDown) Descriptor() ([]byte, []int) {
	return file_huaweiv8r10_bfd_proto_rawDescGZIP(), []int{1}
}

func (x *HwBfdPWSessDown) GetBindType() string {
	if x != nil {
		return x.BindType
	}
	return ""
}

func (x *HwBfdPWSessDown) GetDiagnosis() uint32 {
	if x != nil {
		return x.Diagnosis
	}
	return 0
}

func (x *HwBfdPWSessDown) GetLocalDiscriminator() uint32 {
	if x != nil {
		return x.LocalDiscriminator
	}
	return 0
}

func (x *HwBfdPWSessDown) GetPwId() uint32 {
	if x != nil {
		return x.PwId
	}
	return 0
}

func (x *HwBfdPWSessDown) GetPwSecondary() uint32 {
	if x != nil {
		return x.PwSecondary
	}
	return 0
}

func (x *HwBfdPWSessDown) GetSessIndex() uint32 {
	if x != nil {
		return x.SessIndex
	}
	return 0
}

func (x *HwBfdPWSessDown) GetSessionName() string {
	if x != nil {
		return x.SessionName
	}
	return ""
}

func (x *HwBfdPWSessDown) GetVsiName() string {
	if x != nil {
		return x.VsiName
	}
	return ""
}

func (x *HwBfdPWSessDown) GetVsiPeerAddress() string {
	if x != nil {
		return x.VsiPeerAddress
	}
	return ""
}

type HwBfdPWSessUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindType           string `protobuf:"bytes,1,opt,name=BindType,proto3" json:"BindType,omitempty"`
	Diagnosis          uint32 `protobuf:"varint,2,opt,name=Diagnosis,proto3" json:"Diagnosis,omitempty"`
	LocalDiscriminator uint32 `protobuf:"varint,3,opt,name=LocalDiscriminator,proto3" json:"LocalDiscriminator,omitempty"`
	PwId               uint32 `protobuf:"varint,4,opt,name=PwId,proto3" json:"PwId,omitempty"`
	PwSecondary        uint32 `protobuf:"varint,5,opt,name=PwSecondary,proto3" json:"PwSecondary,omitempty"`
	SessIndex          uint32 `protobuf:"varint,6,opt,name=SessIndex,proto3" json:"SessIndex,omitempty"`
	SessionName        string `protobuf:"bytes,7,opt,name=SessionName,proto3" json:"SessionName,omitempty"`
	VsiName            string `protobuf:"bytes,8,opt,name=VsiName,proto3" json:"VsiName,omitempty"`
	VsiPeerAddress     string `protobuf:"bytes,9,opt,name=VsiPeerAddress,proto3" json:"VsiPeerAddress,omitempty"`
}

func (x *HwBfdPWSessUp) Reset() {
	*x = HwBfdPWSessUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiv8r10_bfd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwBfdPWSessUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwBfdPWSessUp) ProtoMessage() {}

func (x *HwBfdPWSessUp) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiv8r10_bfd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwBfdPWSessUp.ProtoReflect.Descriptor instead.
func (*HwBfdPWSessUp) Descriptor() ([]byte, []int) {
	return file_huaweiv8r10_bfd_proto_rawDescGZIP(), []int{2}
}

func (x *HwBfdPWSessUp) GetBindType() string {
	if x != nil {
		return x.BindType
	}
	return ""
}

func (x *HwBfdPWSessUp) GetDiagnosis() uint32 {
	if x != nil {
		return x.Diagnosis
	}
	return 0
}

func (x *HwBfdPWSessUp) GetLocalDiscriminator() uint32 {
	if x != nil {
		return x.LocalDiscriminator
	}
	return 0
}

func (x *HwBfdPWSessUp) GetPwId() uint32 {
	if x != nil {
		return x.PwId
	}
	return 0
}

func (x *HwBfdPWSessUp) GetPwSecondary() uint32 {
	if x != nil {
		return x.PwSecondary
	}
	return 0
}

func (x *HwBfdPWSessUp) GetSessIndex() uint32 {
	if x != nil {
		return x.SessIndex
	}
	return 0
}

func (x *HwBfdPWSessUp) GetSessionName() string {
	if x != nil {
		return x.SessionName
	}
	return ""
}

func (x *HwBfdPWSessUp) GetVsiName() string {
	if x != nil {
		return x.VsiName
	}
	return ""
}

func (x *HwBfdPWSessUp) GetVsiPeerAddress() string {
	if x != nil {
		return x.VsiPeerAddress
	}
	return ""
}

type HwBfdSessApOperFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apid      uint32 `protobuf:"varint,1,opt,name=apid,proto3" json:"apid,omitempty"`
	Ipaddress string `protobuf:"bytes,2,opt,name=ipaddress,proto3" json:"ipaddress,omitempty"`
	Operation string `protobuf:"bytes,3,opt,name=operation,proto3" json:"operation,omitempty"`
	Reason    string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	Username  string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *HwBfdSessApOperFailed) Reset() {
	*x = HwBfdSessApOperFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiv8r10_bfd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwBfdSessApOperFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwBfdSessApOperFailed) ProtoMessage() {}

func (x *HwBfdSessApOperFailed) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiv8r10_bfd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwBfdSessApOperFailed.ProtoReflect.Descriptor instead.
func (*HwBfdSessApOperFailed) Descriptor() ([]byte, []int) {
	return file_huaweiv8r10_bfd_proto_rawDescGZIP(), []int{3}
}

func (x *HwBfdSessApOperFailed) GetApid() uint32 {
	if x != nil {
		return x.Apid
	}
	return 0
}

func (x *HwBfdSessApOperFailed) GetIpaddress() string {
	if x != nil {
		return x.Ipaddress
	}
	return ""
}

func (x *HwBfdSessApOperFailed) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *HwBfdSessApOperFailed) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *HwBfdSessApOperFailed) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type HwBfdSessCfgRemoteFail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigurationName        string `protobuf:"bytes,1,opt,name=ConfigurationName,proto3" json:"ConfigurationName,omitempty"`
	Index                    uint32 `protobuf:"varint,2,opt,name=Index,proto3" json:"Index,omitempty"`
	LocalDiscriminator       uint32 `protobuf:"varint,3,opt,name=LocalDiscriminator,proto3" json:"LocalDiscriminator,omitempty"`
	BfdSessCfgRemoteFailType string `protobuf:"bytes,4,opt,name=bfdSessCfgRemoteFailType,proto3" json:"bfdSessCfgRemoteFailType,omitempty"`
}

func (x *HwBfdSessCfgRemoteFail) Reset() {
	*x = HwBfdSessCfgRemoteFail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiv8r10_bfd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwBfdSessCfgRemoteFail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwBfdSessCfgRemoteFail) ProtoMessage() {}

func (x *HwBfdSessCfgRemoteFail) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiv8r10_bfd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwBfdSessCfgRemoteFail.ProtoReflect.Descriptor instead.
func (*HwBfdSessCfgRemoteFail) Descriptor() ([]byte, []int) {
	return file_huaweiv8r10_bfd_proto_rawDescGZIP(), []int{4}
}

func (x *HwBfdSessCfgRemoteFail) GetConfigurationName() string {
	if x != nil {
		return x.ConfigurationName
	}
	return ""
}

func (x *HwBfdSessCfgRemoteFail) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *HwBfdSessCfgRemoteFail) GetLocalDiscriminator() uint32 {
	if x != nil {
		return x.LocalDiscriminator
	}
	return 0
}

func (x *HwBfdSessCfgRemoteFail) GetBfdSessCfgRemoteFailType() string {
	if x != nil {
		return x.BfdSessCfgRemoteFailType
	}
	return ""
}

type HwBfdSessDown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindIfIndex       uint32 `protobuf:"varint,1,opt,name=BindIfIndex,proto3" json:"BindIfIndex,omitempty"`
	BindIfName        string `protobuf:"bytes,2,opt,name=BindIfName,proto3" json:"BindIfName,omitempty"`
	BindType          uint32 `protobuf:"varint,3,opt,name=BindType,proto3" json:"BindType,omitempty"`
	BindVpnName       string `protobuf:"bytes,4,opt,name=BindVpnName,proto3" json:"BindVpnName,omitempty"`
	BindVrfIndex      uint32 `protobuf:"varint,5,opt,name=BindVrfIndex,proto3" json:"BindVrfIndex,omitempty"`
	ConfigurationName string `protobuf:"bytes,6,opt,name=ConfigurationName,proto3" json:"ConfigurationName,omitempty"`
	DefaultIp         uint32 `protobuf:"varint,7,opt,name=DefaultIp,proto3" json:"DefaultIp,omitempty"`
	Diagnosis         uint32 `protobuf:"varint,8,opt,name=Diagnosis,proto3" json:"Diagnosis,omitempty"`
	DiscrAuto         uint32 `protobuf:"varint,9,opt,name=DiscrAuto,proto3" json:"DiscrAuto,omitempty"`
	Index             uint32 `protobuf:"varint,10,opt,name=Index,proto3" json:"Index,omitempty"`
	Ipv6NextHop       string `protobuf:"bytes,11,opt,name=Ipv6NextHop,proto3" json:"Ipv6NextHop,omitempty"`
	NextHop           string `protobuf:"bytes,12,opt,name=NextHop,proto3" json:"NextHop,omitempty"`
	PeerIp            string `protobuf:"bytes,13,opt,name=PeerIp,proto3" json:"PeerIp,omitempty"`
	PeerIpv6          string `protobuf:"bytes,14,opt,name=PeerIpv6,proto3" json:"PeerIpv6,omitempty"`
	PwSecondary       uint32 `protobuf:"varint,15,opt,name=PwSecondary,proto3" json:"PwSecondary,omitempty"`
	SessionType       uint32 `protobuf:"varint,16,opt,name=SessionType,proto3" json:"SessionType,omitempty"`
	StaticLspName     string `protobuf:"bytes,17,opt,name=StaticLspName,proto3" json:"StaticLspName,omitempty"`
	VcId              uint32 `protobuf:"varint,18,opt,name=VcId,proto3" json:"VcId,omitempty"`
	VsiName           string `protobuf:"bytes,19,opt,name=VsiName,proto3" json:"VsiName,omitempty"`
	VsiPeerAddress    string `protobuf:"bytes,20,opt,name=VsiPeerAddress,proto3" json:"VsiPeerAddress,omitempty"`
}

func (x *HwBfdSessDown) Reset() {
	*x = HwBfdSessDown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiv8r10_bfd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwBfdSessDown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwBfdSessDown) ProtoMessage() {}

func (x *HwBfdSessDown) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiv8r10_bfd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwBfdSessDown.ProtoReflect.Descriptor instead.
func (*HwBfdSessDown) Descriptor() ([]byte, []int) {
	return file_huaweiv8r10_bfd_proto_rawDescGZIP(), []int{5}
}

func (x *HwBfdSessDown) GetBindIfIndex() uint32 {
	if x != nil {
		return x.BindIfIndex
	}
	return 0
}

func (x *HwBfdSessDown) GetBindIfName() string {
	if x != nil {
		return x.BindIfName
	}
	return ""
}

func (x *HwBfdSessDown) GetBindType() uint32 {
	if x != nil {
		return x.BindType
	}
	return 0
}

func (x *HwBfdSessDown) GetBindVpnName() string {
	if x != nil {
		return x.BindVpnName
	}
	return ""
}

func (x *HwBfdSessDown) GetBindVrfIndex() uint32 {
	if x != nil {
		return x.BindVrfIndex
	}
	return 0
}

func (x *HwBfdSessDown) GetConfigurationName() string {
	if x != nil {
		return x.ConfigurationName
	}
	return ""
}

func (x *HwBfdSessDown) GetDefaultIp() uint32 {
	if x != nil {
		return x.DefaultIp
	}
	return 0
}

func (x *HwBfdSessDown) GetDiagnosis() uint32 {
	if x != nil {
		return x.Diagnosis
	}
	return 0
}

func (x *HwBfdSessDown) GetDiscrAuto() uint32 {
	if x != nil {
		return x.DiscrAuto
	}
	return 0
}

func (x *HwBfdSessDown) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *HwBfdSessDown) GetIpv6NextHop() string {
	if x != nil {
		return x.Ipv6NextHop
	}
	return ""
}

func (x *HwBfdSessDown) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

func (x *HwBfdSessDown) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *HwBfdSessDown) GetPeerIpv6() string {
	if x != nil {
		return x.PeerIpv6
	}
	return ""
}

func (x *HwBfdSessDown) GetPwSecondary() uint32 {
	if x != nil {
		return x.PwSecondary
	}
	return 0
}

func (x *HwBfdSessDown) GetSessionType() uint32 {
	if x != nil {
		return x.SessionType
	}
	return 0
}

func (x *HwBfdSessDown) GetStaticLspName() string {
	if x != nil {
		return x.StaticLspName
	}
	return ""
}

func (x *HwBfdSessDown) GetVcId() uint32 {
	if x != nil {
		return x.VcId
	}
	return 0
}

func (x *HwBfdSessDown) GetVsiName() string {
	if x != nil {
		return x.VsiName
	}
	return ""
}

func (x *HwBfdSessDown) GetVsiPeerAddress() string {
	if x != nil {
		return x.VsiPeerAddress
	}
	return ""
}

type HwBfdSessDownTrap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindType           string `protobuf:"bytes,1,opt,name=BindType,proto3" json:"BindType,omitempty"`
	LocalDiscriminator uint32 `protobuf:"varint,2,opt,name=LocalDiscriminator,proto3" json:"LocalDiscriminator,omitempty"`
	NextHopIPAddress   string `protobuf:"bytes,3,opt,name=NextHopIPAddress,proto3" json:"NextHopIPAddress,omitempty"`
	PeerIPAddress      string `protobuf:"bytes,4,opt,name=PeerIPAddress,proto3" json:"PeerIPAddress,omitempty"`
	SessionIndex       uint32 `protobuf:"varint,5,opt,name=SessionIndex,proto3" json:"SessionIndex,omitempty"`
	SourceIPAddress    string `protobuf:"bytes,6,opt,name=SourceIPAddress,proto3" json:"SourceIPAddress,omitempty"`
	VRFIndex           uint32 `protobuf:"varint,7,opt,name=VRFIndex,proto3" json:"VRFIndex,omitempty"`
	VlanID             int32  `protobuf:"varint,8,opt,name=VlanID,proto3" json:"VlanID,omitempty"`
}

func (x *HwBfdSessDownTrap) Reset() {
	*x = HwBfdSessDownTrap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiv8r10_bfd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwBfdSessDownTrap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwBfdSessDownTrap) ProtoMessage() {}

func (x *HwBfdSessDownTrap) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiv8r10_bfd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwBfdSessDownTrap.ProtoReflect.Descriptor instead.
func (*HwBfdSessDownTrap) Descriptor() ([]byte, []int) {
	return file_huaweiv8r10_bfd_proto_rawDescGZIP(), []int{6}
}

func (x *HwBfdSessDownTrap) GetBindType() string {
	if x != nil {
		return x.BindType
	}
	return ""
}

func (x *HwBfdSessDownTrap) GetLocalDiscriminator() uint32 {
	if x != nil {
		return x.LocalDiscriminator
	}
	return 0
}

func (x *HwBfdSessDownTrap) GetNextHopIPAddress() string {
	if x != nil {
		return x.NextHopIPAddress
	}
	return ""
}

func (x *HwBfdSessDownTrap) GetPeerIPAddress() string {
	if x != nil {
		return x.PeerIPAddress
	}
	return ""
}

func (x *HwBfdSessDownTrap) GetSessionIndex() uint32 {
	if x != nil {
		return x.SessionIndex
	}
	return 0
}

func (x *HwBfdSessDownTrap) GetSourceIPAddress() string {
	if x != nil {
		return x.SourceIPAddress
	}
	return ""
}

func (x *HwBfdSessDownTrap) GetVRFIndex() uint32 {
	if x != nil {
		return x.VRFIndex
	}
	return 0
}

func (x *HwBfdSessDownTrap) GetVlanID() int32 {
	if x != nil {
		return x.VlanID
	}
	return 0
}

type HwBfdSessReachLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalSessionLimit uint32 `protobuf:"varint,1,opt,name=TotalSessionLimit,proto3" json:"TotalSessionLimit,omitempty"`
}

func (x *HwBfdSessReachLimit) Reset() {
	*x = HwBfdSessReachLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiv8r10_bfd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwBfdSessReachLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwBfdSessReachLimit) ProtoMessage() {}

func (x *HwBfdSessReachLimit) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiv8r10_bfd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwBfdSessReachLimit.ProtoReflect.Descriptor instead.
func (*HwBfdSessReachLimit) Descriptor() ([]byte, []int) {
	return file_huaweiv8r10_bfd_proto_rawDescGZIP(), []int{7}
}

func (x *HwBfdSessReachLimit) GetTotalSessionLimit() uint32 {
	if x != nil {
		return x.TotalSessionLimit
	}
	return 0
}

type HwBfdSessReachLimitBindIf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigurationName    string `protobuf:"bytes,1,opt,name=ConfigurationName,proto3" json:"ConfigurationName,omitempty"`
	InterfaceName        string `protobuf:"bytes,2,opt,name=InterfaceName,proto3" json:"InterfaceName,omitempty"`
	SessionLimitPerBoard uint32 `protobuf:"varint,3,opt,name=SessionLimitPerBoard,proto3" json:"SessionLimitPerBoard,omitempty"`
}

func (x *HwBfdSessReachLimitBindIf) Reset() {
	*x = HwBfdSessReachLimitBindIf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiv8r10_bfd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwBfdSessReachLimitBindIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwBfdSessReachLimitBindIf) ProtoMessage() {}

func (x *HwBfdSessReachLimitBindIf) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiv8r10_bfd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwBfdSessReachLimitBindIf.ProtoReflect.Descriptor instead.
func (*HwBfdSessReachLimitBindIf) Descriptor() ([]byte, []int) {
	return file_huaweiv8r10_bfd_proto_rawDescGZIP(), []int{8}
}

func (x *HwBfdSessReachLimitBindIf) GetConfigurationName() string {
	if x != nil {
		return x.ConfigurationName
	}
	return ""
}

func (x *HwBfdSessReachLimitBindIf) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *HwBfdSessReachLimitBindIf) GetSessionLimitPerBoard() uint32 {
	if x != nil {
		return x.SessionLimitPerBoard
	}
	return 0
}

type HwBfdSessUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindIfIndex       uint32 `protobuf:"varint,1,opt,name=BindIfIndex,proto3" json:"BindIfIndex,omitempty"`
	BindIfName        string `protobuf:"bytes,2,opt,name=BindIfName,proto3" json:"BindIfName,omitempty"`
	BindType          uint32 `protobuf:"varint,3,opt,name=BindType,proto3" json:"BindType,omitempty"`
	BindVpnName       string `protobuf:"bytes,4,opt,name=BindVpnName,proto3" json:"BindVpnName,omitempty"`
	BindVrfIndex      uint32 `protobuf:"varint,5,opt,name=BindVrfIndex,proto3" json:"BindVrfIndex,omitempty"`
	ConfigurationName string `protobuf:"bytes,6,opt,name=ConfigurationName,proto3" json:"ConfigurationName,omitempty"`
	DefaultIp         uint32 `protobuf:"varint,7,opt,name=DefaultIp,proto3" json:"DefaultIp,omitempty"`
	Diagnosis         uint32 `protobuf:"varint,8,opt,name=Diagnosis,proto3" json:"Diagnosis,omitempty"`
	DiscrAuto         uint32 `protobuf:"varint,9,opt,name=DiscrAuto,proto3" json:"DiscrAuto,omitempty"`
	Index             uint32 `protobuf:"varint,10,opt,name=Index,proto3" json:"Index,omitempty"`
	Ipv6NextHop       string `protobuf:"bytes,11,opt,name=Ipv6NextHop,proto3" json:"Ipv6NextHop,omitempty"`
	NextHop           string `protobuf:"bytes,12,opt,name=NextHop,proto3" json:"NextHop,omitempty"`
	PeerIp            string `protobuf:"bytes,13,opt,name=PeerIp,proto3" json:"PeerIp,omitempty"`
	PeerIpv6          string `protobuf:"bytes,14,opt,name=PeerIpv6,proto3" json:"PeerIpv6,omitempty"`
	PwSecondary       uint32 `protobuf:"varint,15,opt,name=PwSecondary,proto3" json:"PwSecondary,omitempty"`
	SessionType       uint32 `protobuf:"varint,16,opt,name=SessionType,proto3" json:"SessionType,omitempty"`
	StaticLspName     string `protobuf:"bytes,17,opt,name=StaticLspName,proto3" json:"StaticLspName,omitempty"`
	VcId              uint32 `protobuf:"varint,18,opt,name=VcId,proto3" json:"VcId,omitempty"`
	VsiName           string `protobuf:"bytes,19,opt,name=VsiName,proto3" json:"VsiName,omitempty"`
	VsiPeerAddress    string `protobuf:"bytes,20,opt,name=VsiPeerAddress,proto3" json:"VsiPeerAddress,omitempty"`
}

func (x *HwBfdSessUp) Reset() {
	*x = HwBfdSessUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiv8r10_bfd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwBfdSessUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwBfdSessUp) ProtoMessage() {}

func (x *HwBfdSessUp) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiv8r10_bfd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwBfdSessUp.ProtoReflect.Descriptor instead.
func (*HwBfdSessUp) Descriptor() ([]byte, []int) {
	return file_huaweiv8r10_bfd_proto_rawDescGZIP(), []int{9}
}

func (x *HwBfdSessUp) GetBindIfIndex() uint32 {
	if x != nil {
		return x.BindIfIndex
	}
	return 0
}

func (x *HwBfdSessUp) GetBindIfName() string {
	if x != nil {
		return x.BindIfName
	}
	return ""
}

func (x *HwBfdSessUp) GetBindType() uint32 {
	if x != nil {
		return x.BindType
	}
	return 0
}

func (x *HwBfdSessUp) GetBindVpnName() string {
	if x != nil {
		return x.BindVpnName
	}
	return ""
}

func (x *HwBfdSessUp) GetBindVrfIndex() uint32 {
	if x != nil {
		return x.BindVrfIndex
	}
	return 0
}

func (x *HwBfdSessUp) GetConfigurationName() string {
	if x != nil {
		return x.ConfigurationName
	}
	return ""
}

func (x *HwBfdSessUp) GetDefaultIp() uint32 {
	if x != nil {
		return x.DefaultIp
	}
	return 0
}

func (x *HwBfdSessUp) GetDiagnosis() uint32 {
	if x != nil {
		return x.Diagnosis
	}
	return 0
}

func (x *HwBfdSessUp) GetDiscrAuto() uint32 {
	if x != nil {
		return x.DiscrAuto
	}
	return 0
}

func (x *HwBfdSessUp) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *HwBfdSessUp) GetIpv6NextHop() string {
	if x != nil {
		return x.Ipv6NextHop
	}
	return ""
}

func (x *HwBfdSessUp) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

func (x *HwBfdSessUp) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *HwBfdSessUp) GetPeerIpv6() string {
	if x != nil {
		return x.PeerIpv6
	}
	return ""
}

func (x *HwBfdSessUp) GetPwSecondary() uint32 {
	if x != nil {
		return x.PwSecondary
	}
	return 0
}

func (x *HwBfdSessUp) GetSessionType() uint32 {
	if x != nil {
		return x.SessionType
	}
	return 0
}

func (x *HwBfdSessUp) GetStaticLspName() string {
	if x != nil {
		return x.StaticLspName
	}
	return ""
}

func (x *HwBfdSessUp) GetVcId() uint32 {
	if x != nil {
		return x.VcId
	}
	return 0
}

func (x *HwBfdSessUp) GetVsiName() string {
	if x != nil {
		return x.VsiName
	}
	return ""
}

func (x *HwBfdSessUp) GetVsiPeerAddress() string {
	if x != nil {
		return x.VsiPeerAddress
	}
	return ""
}

type HwBfdSessUpTrap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindType           string `protobuf:"bytes,1,opt,name=BindType,proto3" json:"BindType,omitempty"`
	LocalDiscriminator uint32 `protobuf:"varint,2,opt,name=LocalDiscriminator,proto3" json:"LocalDiscriminator,omitempty"`
	NextHopIPAddress   string `protobuf:"bytes,3,opt,name=NextHopIPAddress,proto3" json:"NextHopIPAddress,omitempty"`
	PeerIPAddress      string `protobuf:"bytes,4,opt,name=PeerIPAddress,proto3" json:"PeerIPAddress,omitempty"`
	SessionIndex       uint32 `protobuf:"varint,5,opt,name=SessionIndex,proto3" json:"SessionIndex,omitempty"`
	SourceIPAddress    string `protobuf:"bytes,6,opt,name=SourceIPAddress,proto3" json:"SourceIPAddress,omitempty"`
	VRFIndex           uint32 `protobuf:"varint,7,opt,name=VRFIndex,proto3" json:"VRFIndex,omitempty"`
	VlanID             int32  `protobuf:"varint,8,opt,name=VlanID,proto3" json:"VlanID,omitempty"`
}

func (x *HwBfdSessUpTrap) Reset() {
	*x = HwBfdSessUpTrap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiv8r10_bfd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwBfdSessUpTrap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwBfdSessUpTrap) ProtoMessage() {}

func (x *HwBfdSessUpTrap) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiv8r10_bfd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwBfdSessUpTrap.ProtoReflect.Descriptor instead.
func (*HwBfdSessUpTrap) Descriptor() ([]byte, []int) {
	return file_huaweiv8r10_bfd_proto_rawDescGZIP(), []int{10}
}

func (x *HwBfdSessUpTrap) GetBindType() string {
	if x != nil {
		return x.BindType
	}
	return ""
}

func (x *HwBfdSessUpTrap) GetLocalDiscriminator() uint32 {
	if x != nil {
		return x.LocalDiscriminator
	}
	return 0
}

func (x *HwBfdSessUpTrap) GetNextHopIPAddress() string {
	if x != nil {
		return x.NextHopIPAddress
	}
	return ""
}

func (x *HwBfdSessUpTrap) GetPeerIPAddress() string {
	if x != nil {
		return x.PeerIPAddress
	}
	return ""
}

func (x *HwBfdSessUpTrap) GetSessionIndex() uint32 {
	if x != nil {
		return x.SessionIndex
	}
	return 0
}

func (x *HwBfdSessUpTrap) GetSourceIPAddress() string {
	if x != nil {
		return x.SourceIPAddress
	}
	return ""
}

func (x *HwBfdSessUpTrap) GetVRFIndex() uint32 {
	if x != nil {
		return x.VRFIndex
	}
	return 0
}

func (x *HwBfdSessUpTrap) GetVlanID() int32 {
	if x != nil {
		return x.VlanID
	}
	return 0
}

type HwBfdv6MultiHopSessDownTrap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerIPv6Address   string `protobuf:"bytes,1,opt,name=PeerIPv6Address,proto3" json:"PeerIPv6Address,omitempty"`
	SessionIndex      uint32 `protobuf:"varint,2,opt,name=SessionIndex,proto3" json:"SessionIndex,omitempty"`
	SourceIPv6Address string `protobuf:"bytes,3,opt,name=SourceIPv6Address,proto3" json:"SourceIPv6Address,omitempty"`
	VRFIndex          uint32 `protobuf:"varint,4,opt,name=VRFIndex,proto3" json:"VRFIndex,omitempty"`
}

func (x *HwBfdv6MultiHopSessDownTrap) Reset() {
	*x = HwBfdv6MultiHopSessDownTrap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiv8r10_bfd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwBfdv6MultiHopSessDownTrap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwBfdv6MultiHopSessDownTrap) ProtoMessage() {}

func (x *HwBfdv6MultiHopSessDownTrap) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiv8r10_bfd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwBfdv6MultiHopSessDownTrap.ProtoReflect.Descriptor instead.
func (*HwBfdv6MultiHopSessDownTrap) Descriptor() ([]byte, []int) {
	return file_huaweiv8r10_bfd_proto_rawDescGZIP(), []int{11}
}

func (x *HwBfdv6MultiHopSessDownTrap) GetPeerIPv6Address() string {
	if x != nil {
		return x.PeerIPv6Address
	}
	return ""
}

func (x *HwBfdv6MultiHopSessDownTrap) GetSessionIndex() uint32 {
	if x != nil {
		return x.SessionIndex
	}
	return 0
}

func (x *HwBfdv6MultiHopSessDownTrap) GetSourceIPv6Address() string {
	if x != nil {
		return x.SourceIPv6Address
	}
	return ""
}

func (x *HwBfdv6MultiHopSessDownTrap) GetVRFIndex() uint32 {
	if x != nil {
		return x.VRFIndex
	}
	return 0
}

type HwBfdv6MultiHopSessUpTrap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerIPv6Address   string `protobuf:"bytes,1,opt,name=PeerIPv6Address,proto3" json:"PeerIPv6Address,omitempty"`
	SessionIndex      uint32 `protobuf:"varint,2,opt,name=SessionIndex,proto3" json:"SessionIndex,omitempty"`
	SourceIPv6Address string `protobuf:"bytes,3,opt,name=SourceIPv6Address,proto3" json:"SourceIPv6Address,omitempty"`
	VRFIndex          uint32 `protobuf:"varint,4,opt,name=VRFIndex,proto3" json:"VRFIndex,omitempty"`
}

func (x *HwBfdv6MultiHopSessUpTrap) Reset() {
	*x = HwBfdv6MultiHopSessUpTrap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiv8r10_bfd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwBfdv6MultiHopSessUpTrap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwBfdv6MultiHopSessUpTrap) ProtoMessage() {}

func (x *HwBfdv6MultiHopSessUpTrap) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiv8r10_bfd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwBfdv6MultiHopSessUpTrap.ProtoReflect.Descriptor instead.
func (*HwBfdv6MultiHopSessUpTrap) Descriptor() ([]byte, []int) {
	return file_huaweiv8r10_bfd_proto_rawDescGZIP(), []int{12}
}

func (x *HwBfdv6MultiHopSessUpTrap) GetPeerIPv6Address() string {
	if x != nil {
		return x.PeerIPv6Address
	}
	return ""
}

func (x *HwBfdv6MultiHopSessUpTrap) GetSessionIndex() uint32 {
	if x != nil {
		return x.SessionIndex
	}
	return 0
}

func (x *HwBfdv6MultiHopSessUpTrap) GetSourceIPv6Address() string {
	if x != nil {
		return x.SourceIPv6Address
	}
	return ""
}

func (x *HwBfdv6MultiHopSessUpTrap) GetVRFIndex() uint32 {
	if x != nil {
		return x.VRFIndex
	}
	return 0
}

type HwBfdv6SingleHopSessDownTrap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerIPv6Address   string `protobuf:"bytes,1,opt,name=PeerIPv6Address,proto3" json:"PeerIPv6Address,omitempty"`
	SessionIndex      uint32 `protobuf:"varint,2,opt,name=SessionIndex,proto3" json:"SessionIndex,omitempty"`
	SourceIPv6Address string `protobuf:"bytes,3,opt,name=SourceIPv6Address,proto3" json:"SourceIPv6Address,omitempty"`
	VlanID            int32  `protobuf:"varint,4,opt,name=VlanID,proto3" json:"VlanID,omitempty"`
}

func (x *HwBfdv6SingleHopSessDownTrap) Reset() {
	*x = HwBfdv6SingleHopSessDownTrap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiv8r10_bfd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwBfdv6SingleHopSessDownTrap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwBfdv6SingleHopSessDownTrap) ProtoMessage() {}

func (x *HwBfdv6SingleHopSessDownTrap) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiv8r10_bfd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwBfdv6SingleHopSessDownTrap.ProtoReflect.Descriptor instead.
func (*HwBfdv6SingleHopSessDownTrap) Descriptor() ([]byte, []int) {
	return file_huaweiv8r10_bfd_proto_rawDescGZIP(), []int{13}
}

func (x *HwBfdv6SingleHopSessDownTrap) GetPeerIPv6Address() string {
	if x != nil {
		return x.PeerIPv6Address
	}
	return ""
}

func (x *HwBfdv6SingleHopSessDownTrap) GetSessionIndex() uint32 {
	if x != nil {
		return x.SessionIndex
	}
	return 0
}

func (x *HwBfdv6SingleHopSessDownTrap) GetSourceIPv6Address() string {
	if x != nil {
		return x.SourceIPv6Address
	}
	return ""
}

func (x *HwBfdv6SingleHopSessDownTrap) GetVlanID() int32 {
	if x != nil {
		return x.VlanID
	}
	return 0
}

type HwBfdv6SingleHopSessUpTrap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerIPv6Address   string `protobuf:"bytes,1,opt,name=PeerIPv6Address,proto3" json:"PeerIPv6Address,omitempty"`
	SessionIndex      uint32 `protobuf:"varint,2,opt,name=SessionIndex,proto3" json:"SessionIndex,omitempty"`
	SourceIPv6Address string `protobuf:"bytes,3,opt,name=SourceIPv6Address,proto3" json:"SourceIPv6Address,omitempty"`
	VlanID            int32  `protobuf:"varint,4,opt,name=VlanID,proto3" json:"VlanID,omitempty"`
}

func (x *HwBfdv6SingleHopSessUpTrap) Reset() {
	*x = HwBfdv6SingleHopSessUpTrap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiv8r10_bfd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwBfdv6SingleHopSessUpTrap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwBfdv6SingleHopSessUpTrap) ProtoMessage() {}

func (x *HwBfdv6SingleHopSessUpTrap) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiv8r10_bfd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwBfdv6SingleHopSessUpTrap.ProtoReflect.Descriptor instead.
func (*HwBfdv6SingleHopSessUpTrap) Descriptor() ([]byte, []int) {
	return file_huaweiv8r10_bfd_proto_rawDescGZIP(), []int{14}
}

func (x *HwBfdv6SingleHopSessUpTrap) GetPeerIPv6Address() string {
	if x != nil {
		return x.PeerIPv6Address
	}
	return ""
}

func (x *HwBfdv6SingleHopSessUpTrap) GetSessionIndex() uint32 {
	if x != nil {
		return x.SessionIndex
	}
	return 0
}

func (x *HwBfdv6SingleHopSessUpTrap) GetSourceIPv6Address() string {
	if x != nil {
		return x.SourceIPv6Address
	}
	return ""
}

func (x *HwBfdv6SingleHopSessUpTrap) GetVlanID() int32 {
	if x != nil {
		return x.VlanID
	}
	return 0
}

var File_huaweiv8r10_bfd_proto protoreflect.FileDescriptor

var file_huaweiv8r10_bfd_proto_rawDesc = []byte{
	0x0a, 0x15, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x76, 0x38, 0x72, 0x31, 0x30, 0x2d, 0x62, 0x66,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x76,
	0x38, 0x72, 0x31, 0x30, 0x5f, 0x62, 0x66, 0x64, 0x22, 0x05, 0x0a, 0x03, 0x42, 0x66, 0x64, 0x22,
	0xb3, 0x02, 0x0a, 0x0f, 0x48, 0x77, 0x42, 0x66, 0x64, 0x50, 0x57, 0x53, 0x65, 0x73, 0x73, 0x44,
	0x6f, 0x77, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x50, 0x77, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x50, 0x77, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x50, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x73, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x73, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x56, 0x73, 0x69, 0x50, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x56, 0x73, 0x69, 0x50, 0x65, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xb1, 0x02, 0x0a, 0x0d, 0x48, 0x77, 0x42, 0x66, 0x64, 0x50,
	0x57, 0x53, 0x65, 0x73, 0x73, 0x55, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x69, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x69, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x77, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x50, 0x77, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x50, 0x77, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x73, 0x69, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x73, 0x69, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x56, 0x73, 0x69, 0x50, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x56, 0x73, 0x69, 0x50, 0x65,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x15, 0x48, 0x77,
	0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x41, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x61, 0x70, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x70, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x16, 0x48, 0x77, 0x42, 0x66,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x43, 0x66, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x61,
	0x69, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44,
	0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x18, 0x62, 0x66, 0x64, 0x53, 0x65, 0x73,
	0x73, 0x43, 0x66, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x62, 0x66, 0x64, 0x53, 0x65, 0x73,
	0x73, 0x43, 0x66, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x81, 0x05, 0x0a, 0x0d, 0x48, 0x77, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73,
	0x44, 0x6f, 0x77, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x69, 0x6e, 0x64, 0x49, 0x66, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x42, 0x69, 0x6e, 0x64, 0x49,
	0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x64, 0x49, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x69, 0x6e, 0x64,
	0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x70, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x70, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x72, 0x66, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x42, 0x69, 0x6e, 0x64,
	0x56, 0x72, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x49, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x49, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x63, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x44, 0x69, 0x73, 0x63, 0x72, 0x41, 0x75, 0x74, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x70, 0x76, 0x36, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x70, 0x76,
	0x36, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x65, 0x65, 0x72, 0x49, 0x70, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x50, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x65,
	0x65, 0x72, 0x49, 0x70, 0x76, 0x36, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x65,
	0x65, 0x72, 0x49, 0x70, 0x76, 0x36, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x77, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x50, 0x77, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x4c, 0x73, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4c, 0x73, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x56, 0x63, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x56, 0x63, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x73, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x73, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x56, 0x73, 0x69, 0x50, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x56, 0x73, 0x69, 0x50, 0x65, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xb3, 0x02, 0x0a, 0x11, 0x48, 0x77, 0x42, 0x66, 0x64,
	0x53, 0x65, 0x73, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x72, 0x61, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x69, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x42, 0x69, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x72,
	0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x65, 0x65, 0x72, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x65, 0x65,
	0x72, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28,
	0x0a, 0x0f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x52, 0x46, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x56, 0x52, 0x46, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x22, 0x43, 0x0a, 0x13,
	0x48, 0x77, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x52, 0x65, 0x61, 0x63, 0x68, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0xa3, 0x01, 0x0a, 0x19, 0x48, 0x77, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x61, 0x63, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x49, 0x66, 0x12,
	0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50,
	0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x22, 0xff, 0x04, 0x0a, 0x0b, 0x48, 0x77, 0x42, 0x66,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x55, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x69, 0x6e, 0x64, 0x49,
	0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x42, 0x69,
	0x6e, 0x64, 0x49, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x69, 0x6e,
	0x64, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42,
	0x69, 0x6e, 0x64, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x69, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x42, 0x69, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x70, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x69, 0x6e, 0x64,
	0x56, 0x70, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x69, 0x6e, 0x64, 0x56,
	0x72, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x42,
	0x69, 0x6e, 0x64, 0x56, 0x72, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x49, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x69, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x63, 0x72, 0x41, 0x75,
	0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x44, 0x69, 0x73, 0x63, 0x72, 0x41,
	0x75, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x70, 0x76,
	0x36, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x49, 0x70, 0x76, 0x36, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x65, 0x65, 0x72, 0x49, 0x70, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x65, 0x65, 0x72, 0x49, 0x70, 0x76, 0x36, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x50, 0x65, 0x65, 0x72, 0x49, 0x70, 0x76, 0x36, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x77, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x50, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4c, 0x73, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4c, 0x73, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x63, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x56, 0x63, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x73, 0x69, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x73, 0x69, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x56, 0x73, 0x69, 0x50, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x56, 0x73, 0x69, 0x50, 0x65,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xb1, 0x02, 0x0a, 0x0f, 0x48, 0x77,
	0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x55, 0x70, 0x54, 0x72, 0x61, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63,
	0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x65, 0x65, 0x72, 0x49, 0x50, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x65,
	0x65, 0x72, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x28, 0x0a, 0x0f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x52, 0x46,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x56, 0x52, 0x46,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x22, 0xb5, 0x01,
	0x0a, 0x1b, 0x48, 0x77, 0x42, 0x66, 0x64, 0x76, 0x36, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x48, 0x6f,
	0x70, 0x53, 0x65, 0x73, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x72, 0x61, 0x70, 0x12, 0x28, 0x0a,
	0x0f, 0x50, 0x65, 0x65, 0x72, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x65, 0x65, 0x72, 0x49, 0x50, 0x76, 0x36,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x50,
	0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x52, 0x46,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x56, 0x52, 0x46,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xb3, 0x01, 0x0a, 0x19, 0x48, 0x77, 0x42, 0x66, 0x64, 0x76,
	0x36, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x48, 0x6f, 0x70, 0x53, 0x65, 0x73, 0x73, 0x55, 0x70, 0x54,
	0x72, 0x61, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x65, 0x65, 0x72, 0x49, 0x50, 0x76, 0x36, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x65,
	0x65, 0x72, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x50, 0x76, 0x36, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x56, 0x52, 0x46, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x56, 0x52, 0x46, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xb2, 0x01, 0x0a, 0x1c,
	0x48, 0x77, 0x42, 0x66, 0x64, 0x76, 0x36, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x70,
	0x53, 0x65, 0x73, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x72, 0x61, 0x70, 0x12, 0x28, 0x0a, 0x0f,
	0x50, 0x65, 0x65, 0x72, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x65, 0x65, 0x72, 0x49, 0x50, 0x76, 0x36, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x50, 0x76,
	0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6c, 0x61, 0x6e,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x44,
	0x22, 0xb0, 0x01, 0x0a, 0x1a, 0x48, 0x77, 0x42, 0x66, 0x64, 0x76, 0x36, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x48, 0x6f, 0x70, 0x53, 0x65, 0x73, 0x73, 0x55, 0x70, 0x54, 0x72, 0x61, 0x70, 0x12,
	0x28, 0x0a, 0x0f, 0x50, 0x65, 0x65, 0x72, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x65, 0x65, 0x72, 0x49, 0x50,
	0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a,
	0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x56,
	0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x56, 0x6c, 0x61,
	0x6e, 0x49, 0x44, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_huaweiv8r10_bfd_proto_rawDescOnce sync.Once
	file_huaweiv8r10_bfd_proto_rawDescData = file_huaweiv8r10_bfd_proto_rawDesc
)

func file_huaweiv8r10_bfd_proto_rawDescGZIP() []byte {
	file_huaweiv8r10_bfd_proto_rawDescOnce.Do(func() {
		file_huaweiv8r10_bfd_proto_rawDescData = protoimpl.X.CompressGZIP(file_huaweiv8r10_bfd_proto_rawDescData)
	})
	return file_huaweiv8r10_bfd_proto_rawDescData
}

var file_huaweiv8r10_bfd_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_huaweiv8r10_bfd_proto_goTypes = []interface{}{
	(*Bfd)(nil),                          // 0: huaweiv8r10_bfd.Bfd
	(*HwBfdPWSessDown)(nil),              // 1: huaweiv8r10_bfd.HwBfdPWSessDown
	(*HwBfdPWSessUp)(nil),                // 2: huaweiv8r10_bfd.HwBfdPWSessUp
	(*HwBfdSessApOperFailed)(nil),        // 3: huaweiv8r10_bfd.HwBfdSessApOperFailed
	(*HwBfdSessCfgRemoteFail)(nil),       // 4: huaweiv8r10_bfd.HwBfdSessCfgRemoteFail
	(*HwBfdSessDown)(nil),                // 5: huaweiv8r10_bfd.HwBfdSessDown
	(*HwBfdSessDownTrap)(nil),            // 6: huaweiv8r10_bfd.HwBfdSessDownTrap
	(*HwBfdSessReachLimit)(nil),          // 7: huaweiv8r10_bfd.HwBfdSessReachLimit
	(*HwBfdSessReachLimitBindIf)(nil),    // 8: huaweiv8r10_bfd.HwBfdSessReachLimitBindIf
	(*HwBfdSessUp)(nil),                  // 9: huaweiv8r10_bfd.HwBfdSessUp
	(*HwBfdSessUpTrap)(nil),              // 10: huaweiv8r10_bfd.HwBfdSessUpTrap
	(*HwBfdv6MultiHopSessDownTrap)(nil),  // 11: huaweiv8r10_bfd.HwBfdv6MultiHopSessDownTrap
	(*HwBfdv6MultiHopSessUpTrap)(nil),    // 12: huaweiv8r10_bfd.HwBfdv6MultiHopSessUpTrap
	(*HwBfdv6SingleHopSessDownTrap)(nil), // 13: huaweiv8r10_bfd.HwBfdv6SingleHopSessDownTrap
	(*HwBfdv6SingleHopSessUpTrap)(nil),   // 14: huaweiv8r10_bfd.HwBfdv6SingleHopSessUpTrap
}
var file_huaweiv8r10_bfd_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_huaweiv8r10_bfd_proto_init() }
func file_huaweiv8r10_bfd_proto_init() {
	if File_huaweiv8r10_bfd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_huaweiv8r10_bfd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bfd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiv8r10_bfd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwBfdPWSessDown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiv8r10_bfd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwBfdPWSessUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiv8r10_bfd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwBfdSessApOperFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiv8r10_bfd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwBfdSessCfgRemoteFail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiv8r10_bfd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwBfdSessDown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiv8r10_bfd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwBfdSessDownTrap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiv8r10_bfd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwBfdSessReachLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiv8r10_bfd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwBfdSessReachLimitBindIf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiv8r10_bfd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwBfdSessUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiv8r10_bfd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwBfdSessUpTrap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiv8r10_bfd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwBfdv6MultiHopSessDownTrap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiv8r10_bfd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwBfdv6MultiHopSessUpTrap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiv8r10_bfd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwBfdv6SingleHopSessDownTrap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiv8r10_bfd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwBfdv6SingleHopSessUpTrap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_huaweiv8r10_bfd_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_huaweiv8r10_bfd_proto_goTypes,
		DependencyIndexes: file_huaweiv8r10_bfd_proto_depIdxs,
		MessageInfos:      file_huaweiv8r10_bfd_proto_msgTypes,
	}.Build()
	File_huaweiv8r10_bfd_proto = out.File
	file_huaweiv8r10_bfd_proto_rawDesc = nil
	file_huaweiv8r10_bfd_proto_goTypes = nil
	file_huaweiv8r10_bfd_proto_depIdxs = nil
}
