// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: huaweiV8R10-driver.proto

package huaweiV8R10_driver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HwBoardFail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntPhysicalIndex    uint32 `protobuf:"varint,1,opt,name=EntPhysicalIndex,proto3" json:"EntPhysicalIndex,omitempty"`
	EntPhysicalName     string `protobuf:"bytes,2,opt,name=EntPhysicalName,proto3" json:"EntPhysicalName,omitempty"`
	EntityPhysicalIndex uint32 `protobuf:"varint,3,opt,name=EntityPhysicalIndex,proto3" json:"EntityPhysicalIndex,omitempty"`
	EntityTrapFaultID   uint32 `protobuf:"varint,4,opt,name=EntityTrapFaultID,proto3" json:"EntityTrapFaultID,omitempty"`
	EntityType          uint32 `protobuf:"varint,5,opt,name=EntityType,proto3" json:"EntityType,omitempty"`
	Reason              string `protobuf:"bytes,6,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (x *HwBoardFail) Reset() {
	*x = HwBoardFail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R10_driver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwBoardFail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwBoardFail) ProtoMessage() {}

func (x *HwBoardFail) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R10_driver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwBoardFail.ProtoReflect.Descriptor instead.
func (*HwBoardFail) Descriptor() ([]byte, []int) {
	return file_huaweiV8R10_driver_proto_rawDescGZIP(), []int{0}
}

func (x *HwBoardFail) GetEntPhysicalIndex() uint32 {
	if x != nil {
		return x.EntPhysicalIndex
	}
	return 0
}

func (x *HwBoardFail) GetEntPhysicalName() string {
	if x != nil {
		return x.EntPhysicalName
	}
	return ""
}

func (x *HwBoardFail) GetEntityPhysicalIndex() uint32 {
	if x != nil {
		return x.EntityPhysicalIndex
	}
	return 0
}

func (x *HwBoardFail) GetEntityTrapFaultID() uint32 {
	if x != nil {
		return x.EntityTrapFaultID
	}
	return 0
}

func (x *HwBoardFail) GetEntityType() uint32 {
	if x != nil {
		return x.EntityType
	}
	return 0
}

func (x *HwBoardFail) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type HwBoardFailResume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntPhysicalIndex    uint32 `protobuf:"varint,1,opt,name=EntPhysicalIndex,proto3" json:"EntPhysicalIndex,omitempty"`
	EntPhysicalName     string `protobuf:"bytes,2,opt,name=EntPhysicalName,proto3" json:"EntPhysicalName,omitempty"`
	EntityPhysicalIndex uint32 `protobuf:"varint,3,opt,name=EntityPhysicalIndex,proto3" json:"EntityPhysicalIndex,omitempty"`
	EntityTrapFaultID   uint32 `protobuf:"varint,4,opt,name=EntityTrapFaultID,proto3" json:"EntityTrapFaultID,omitempty"`
	EntityType          uint32 `protobuf:"varint,5,opt,name=EntityType,proto3" json:"EntityType,omitempty"`
	Reason              string `protobuf:"bytes,6,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (x *HwBoardFailResume) Reset() {
	*x = HwBoardFailResume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R10_driver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwBoardFailResume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwBoardFailResume) ProtoMessage() {}

func (x *HwBoardFailResume) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R10_driver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwBoardFailResume.ProtoReflect.Descriptor instead.
func (*HwBoardFailResume) Descriptor() ([]byte, []int) {
	return file_huaweiV8R10_driver_proto_rawDescGZIP(), []int{1}
}

func (x *HwBoardFailResume) GetEntPhysicalIndex() uint32 {
	if x != nil {
		return x.EntPhysicalIndex
	}
	return 0
}

func (x *HwBoardFailResume) GetEntPhysicalName() string {
	if x != nil {
		return x.EntPhysicalName
	}
	return ""
}

func (x *HwBoardFailResume) GetEntityPhysicalIndex() uint32 {
	if x != nil {
		return x.EntityPhysicalIndex
	}
	return 0
}

func (x *HwBoardFailResume) GetEntityTrapFaultID() uint32 {
	if x != nil {
		return x.EntityTrapFaultID
	}
	return 0
}

func (x *HwBoardFailResume) GetEntityType() uint32 {
	if x != nil {
		return x.EntityType
	}
	return 0
}

func (x *HwBoardFailResume) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type HwBoardInvalid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntPhysicalIndex    uint32 `protobuf:"varint,1,opt,name=EntPhysicalIndex,proto3" json:"EntPhysicalIndex,omitempty"`
	EntPhysicalName     string `protobuf:"bytes,2,opt,name=EntPhysicalName,proto3" json:"EntPhysicalName,omitempty"`
	EntityPhysicalIndex uint32 `protobuf:"varint,3,opt,name=EntityPhysicalIndex,proto3" json:"EntityPhysicalIndex,omitempty"`
	EntityTrapFaultID   uint32 `protobuf:"varint,4,opt,name=EntityTrapFaultID,proto3" json:"EntityTrapFaultID,omitempty"`
	EntityType          uint32 `protobuf:"varint,5,opt,name=EntityType,proto3" json:"EntityType,omitempty"`
	Reason              string `protobuf:"bytes,6,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (x *HwBoardInvalid) Reset() {
	*x = HwBoardInvalid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R10_driver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwBoardInvalid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwBoardInvalid) ProtoMessage() {}

func (x *HwBoardInvalid) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R10_driver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwBoardInvalid.ProtoReflect.Descriptor instead.
func (*HwBoardInvalid) Descriptor() ([]byte, []int) {
	return file_huaweiV8R10_driver_proto_rawDescGZIP(), []int{2}
}

func (x *HwBoardInvalid) GetEntPhysicalIndex() uint32 {
	if x != nil {
		return x.EntPhysicalIndex
	}
	return 0
}

func (x *HwBoardInvalid) GetEntPhysicalName() string {
	if x != nil {
		return x.EntPhysicalName
	}
	return ""
}

func (x *HwBoardInvalid) GetEntityPhysicalIndex() uint32 {
	if x != nil {
		return x.EntityPhysicalIndex
	}
	return 0
}

func (x *HwBoardInvalid) GetEntityTrapFaultID() uint32 {
	if x != nil {
		return x.EntityTrapFaultID
	}
	return 0
}

func (x *HwBoardInvalid) GetEntityType() uint32 {
	if x != nil {
		return x.EntityType
	}
	return 0
}

func (x *HwBoardInvalid) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type HwBoardInvalidResume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntPhysicalIndex    uint32 `protobuf:"varint,1,opt,name=EntPhysicalIndex,proto3" json:"EntPhysicalIndex,omitempty"`
	EntPhysicalName     string `protobuf:"bytes,2,opt,name=EntPhysicalName,proto3" json:"EntPhysicalName,omitempty"`
	EntityPhysicalIndex uint32 `protobuf:"varint,3,opt,name=EntityPhysicalIndex,proto3" json:"EntityPhysicalIndex,omitempty"`
	EntityTrapFaultID   uint32 `protobuf:"varint,4,opt,name=EntityTrapFaultID,proto3" json:"EntityTrapFaultID,omitempty"`
	EntityType          uint32 `protobuf:"varint,5,opt,name=EntityType,proto3" json:"EntityType,omitempty"`
	Reason              string `protobuf:"bytes,6,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (x *HwBoardInvalidResume) Reset() {
	*x = HwBoardInvalidResume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R10_driver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwBoardInvalidResume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwBoardInvalidResume) ProtoMessage() {}

func (x *HwBoardInvalidResume) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R10_driver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwBoardInvalidResume.ProtoReflect.Descriptor instead.
func (*HwBoardInvalidResume) Descriptor() ([]byte, []int) {
	return file_huaweiV8R10_driver_proto_rawDescGZIP(), []int{3}
}

func (x *HwBoardInvalidResume) GetEntPhysicalIndex() uint32 {
	if x != nil {
		return x.EntPhysicalIndex
	}
	return 0
}

func (x *HwBoardInvalidResume) GetEntPhysicalName() string {
	if x != nil {
		return x.EntPhysicalName
	}
	return ""
}

func (x *HwBoardInvalidResume) GetEntityPhysicalIndex() uint32 {
	if x != nil {
		return x.EntityPhysicalIndex
	}
	return 0
}

func (x *HwBoardInvalidResume) GetEntityTrapFaultID() uint32 {
	if x != nil {
		return x.EntityTrapFaultID
	}
	return 0
}

func (x *HwBoardInvalidResume) GetEntityType() uint32 {
	if x != nil {
		return x.EntityType
	}
	return 0
}

func (x *HwBoardInvalidResume) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type HwEntityInvalid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseTrapEventType   uint32 `protobuf:"varint,1,opt,name=BaseTrapEventType,proto3" json:"BaseTrapEventType,omitempty"`
	BaseTrapSeverity    uint32 `protobuf:"varint,2,opt,name=BaseTrapSeverity,proto3" json:"BaseTrapSeverity,omitempty"`
	EntContainedIn      uint32 `protobuf:"varint,3,opt,name=EntContainedIn,proto3" json:"EntContainedIn,omitempty"`
	EntPhysicalName     string `protobuf:"bytes,4,opt,name=EntPhysicalName,proto3" json:"EntPhysicalName,omitempty"`
	EntityPhysicalIndex uint32 `protobuf:"varint,5,opt,name=EntityPhysicalIndex,proto3" json:"EntityPhysicalIndex,omitempty"`
	ProbableCause       uint32 `protobuf:"varint,6,opt,name=ProbableCause,proto3" json:"ProbableCause,omitempty"`
	ReasonDescription   string `protobuf:"bytes,7,opt,name=ReasonDescription,proto3" json:"ReasonDescription,omitempty"`
	RelativeResource    string `protobuf:"bytes,8,opt,name=RelativeResource,proto3" json:"RelativeResource,omitempty"`
}

func (x *HwEntityInvalid) Reset() {
	*x = HwEntityInvalid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R10_driver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwEntityInvalid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwEntityInvalid) ProtoMessage() {}

func (x *HwEntityInvalid) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R10_driver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwEntityInvalid.ProtoReflect.Descriptor instead.
func (*HwEntityInvalid) Descriptor() ([]byte, []int) {
	return file_huaweiV8R10_driver_proto_rawDescGZIP(), []int{4}
}

func (x *HwEntityInvalid) GetBaseTrapEventType() uint32 {
	if x != nil {
		return x.BaseTrapEventType
	}
	return 0
}

func (x *HwEntityInvalid) GetBaseTrapSeverity() uint32 {
	if x != nil {
		return x.BaseTrapSeverity
	}
	return 0
}

func (x *HwEntityInvalid) GetEntContainedIn() uint32 {
	if x != nil {
		return x.EntContainedIn
	}
	return 0
}

func (x *HwEntityInvalid) GetEntPhysicalName() string {
	if x != nil {
		return x.EntPhysicalName
	}
	return ""
}

func (x *HwEntityInvalid) GetEntityPhysicalIndex() uint32 {
	if x != nil {
		return x.EntityPhysicalIndex
	}
	return 0
}

func (x *HwEntityInvalid) GetProbableCause() uint32 {
	if x != nil {
		return x.ProbableCause
	}
	return 0
}

func (x *HwEntityInvalid) GetReasonDescription() string {
	if x != nil {
		return x.ReasonDescription
	}
	return ""
}

func (x *HwEntityInvalid) GetRelativeResource() string {
	if x != nil {
		return x.RelativeResource
	}
	return ""
}

type HwEntityResume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseTrapEventType   uint32 `protobuf:"varint,1,opt,name=BaseTrapEventType,proto3" json:"BaseTrapEventType,omitempty"`
	BaseTrapSeverity    uint32 `protobuf:"varint,2,opt,name=BaseTrapSeverity,proto3" json:"BaseTrapSeverity,omitempty"`
	EntContainedIn      uint32 `protobuf:"varint,3,opt,name=EntContainedIn,proto3" json:"EntContainedIn,omitempty"`
	EntPhysicalName     string `protobuf:"bytes,4,opt,name=EntPhysicalName,proto3" json:"EntPhysicalName,omitempty"`
	EntityPhysicalIndex uint32 `protobuf:"varint,5,opt,name=EntityPhysicalIndex,proto3" json:"EntityPhysicalIndex,omitempty"`
	ProbableCause       uint32 `protobuf:"varint,6,opt,name=ProbableCause,proto3" json:"ProbableCause,omitempty"`
	ReasonDescription   string `protobuf:"bytes,7,opt,name=ReasonDescription,proto3" json:"ReasonDescription,omitempty"`
	RelativeResource    string `protobuf:"bytes,8,opt,name=RelativeResource,proto3" json:"RelativeResource,omitempty"`
}

func (x *HwEntityResume) Reset() {
	*x = HwEntityResume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R10_driver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwEntityResume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwEntityResume) ProtoMessage() {}

func (x *HwEntityResume) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R10_driver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwEntityResume.ProtoReflect.Descriptor instead.
func (*HwEntityResume) Descriptor() ([]byte, []int) {
	return file_huaweiV8R10_driver_proto_rawDescGZIP(), []int{5}
}

func (x *HwEntityResume) GetBaseTrapEventType() uint32 {
	if x != nil {
		return x.BaseTrapEventType
	}
	return 0
}

func (x *HwEntityResume) GetBaseTrapSeverity() uint32 {
	if x != nil {
		return x.BaseTrapSeverity
	}
	return 0
}

func (x *HwEntityResume) GetEntContainedIn() uint32 {
	if x != nil {
		return x.EntContainedIn
	}
	return 0
}

func (x *HwEntityResume) GetEntPhysicalName() string {
	if x != nil {
		return x.EntPhysicalName
	}
	return ""
}

func (x *HwEntityResume) GetEntityPhysicalIndex() uint32 {
	if x != nil {
		return x.EntityPhysicalIndex
	}
	return 0
}

func (x *HwEntityResume) GetProbableCause() uint32 {
	if x != nil {
		return x.ProbableCause
	}
	return 0
}

func (x *HwEntityResume) GetReasonDescription() string {
	if x != nil {
		return x.ReasonDescription
	}
	return ""
}

func (x *HwEntityResume) GetRelativeResource() string {
	if x != nil {
		return x.RelativeResource
	}
	return ""
}

type HwOpticalInvalid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntPhysicalIndex    uint32 `protobuf:"varint,1,opt,name=EntPhysicalIndex,proto3" json:"EntPhysicalIndex,omitempty"`
	EntPhysicalName     string `protobuf:"bytes,2,opt,name=EntPhysicalName,proto3" json:"EntPhysicalName,omitempty"`
	EntityPhysicalIndex uint32 `protobuf:"varint,3,opt,name=EntityPhysicalIndex,proto3" json:"EntityPhysicalIndex,omitempty"`
	EntityTrapFaultID   uint32 `protobuf:"varint,4,opt,name=EntityTrapFaultID,proto3" json:"EntityTrapFaultID,omitempty"`
	ReasonDescription   string `protobuf:"bytes,5,opt,name=ReasonDescription,proto3" json:"ReasonDescription,omitempty"`
}

func (x *HwOpticalInvalid) Reset() {
	*x = HwOpticalInvalid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R10_driver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwOpticalInvalid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwOpticalInvalid) ProtoMessage() {}

func (x *HwOpticalInvalid) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R10_driver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwOpticalInvalid.ProtoReflect.Descriptor instead.
func (*HwOpticalInvalid) Descriptor() ([]byte, []int) {
	return file_huaweiV8R10_driver_proto_rawDescGZIP(), []int{6}
}

func (x *HwOpticalInvalid) GetEntPhysicalIndex() uint32 {
	if x != nil {
		return x.EntPhysicalIndex
	}
	return 0
}

func (x *HwOpticalInvalid) GetEntPhysicalName() string {
	if x != nil {
		return x.EntPhysicalName
	}
	return ""
}

func (x *HwOpticalInvalid) GetEntityPhysicalIndex() uint32 {
	if x != nil {
		return x.EntityPhysicalIndex
	}
	return 0
}

func (x *HwOpticalInvalid) GetEntityTrapFaultID() uint32 {
	if x != nil {
		return x.EntityTrapFaultID
	}
	return 0
}

func (x *HwOpticalInvalid) GetReasonDescription() string {
	if x != nil {
		return x.ReasonDescription
	}
	return ""
}

type HwOpticalInvalidResume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntPhysicalIndex    uint32 `protobuf:"varint,1,opt,name=EntPhysicalIndex,proto3" json:"EntPhysicalIndex,omitempty"`
	EntPhysicalName     string `protobuf:"bytes,2,opt,name=EntPhysicalName,proto3" json:"EntPhysicalName,omitempty"`
	EntityPhysicalIndex uint32 `protobuf:"varint,3,opt,name=EntityPhysicalIndex,proto3" json:"EntityPhysicalIndex,omitempty"`
	EntityTrapFaultID   uint32 `protobuf:"varint,4,opt,name=EntityTrapFaultID,proto3" json:"EntityTrapFaultID,omitempty"`
	ReasonDescription   string `protobuf:"bytes,5,opt,name=ReasonDescription,proto3" json:"ReasonDescription,omitempty"`
}

func (x *HwOpticalInvalidResume) Reset() {
	*x = HwOpticalInvalidResume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R10_driver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwOpticalInvalidResume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwOpticalInvalidResume) ProtoMessage() {}

func (x *HwOpticalInvalidResume) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R10_driver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwOpticalInvalidResume.ProtoReflect.Descriptor instead.
func (*HwOpticalInvalidResume) Descriptor() ([]byte, []int) {
	return file_huaweiV8R10_driver_proto_rawDescGZIP(), []int{7}
}

func (x *HwOpticalInvalidResume) GetEntPhysicalIndex() uint32 {
	if x != nil {
		return x.EntPhysicalIndex
	}
	return 0
}

func (x *HwOpticalInvalidResume) GetEntPhysicalName() string {
	if x != nil {
		return x.EntPhysicalName
	}
	return ""
}

func (x *HwOpticalInvalidResume) GetEntityPhysicalIndex() uint32 {
	if x != nil {
		return x.EntityPhysicalIndex
	}
	return 0
}

func (x *HwOpticalInvalidResume) GetEntityTrapFaultID() uint32 {
	if x != nil {
		return x.EntityTrapFaultID
	}
	return 0
}

func (x *HwOpticalInvalidResume) GetReasonDescription() string {
	if x != nil {
		return x.ReasonDescription
	}
	return ""
}

type HwRATEOFTRAFFICResume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntPhysicalIndex    uint32 `protobuf:"varint,1,opt,name=EntPhysicalIndex,proto3" json:"EntPhysicalIndex,omitempty"`
	EntPhysicalName     string `protobuf:"bytes,2,opt,name=EntPhysicalName,proto3" json:"EntPhysicalName,omitempty"`
	EntityPhysicalIndex uint32 `protobuf:"varint,3,opt,name=EntityPhysicalIndex,proto3" json:"EntityPhysicalIndex,omitempty"`
	EntityTrapFaultID   uint32 `protobuf:"varint,4,opt,name=EntityTrapFaultID,proto3" json:"EntityTrapFaultID,omitempty"`
	Reason              string `protobuf:"bytes,5,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (x *HwRATEOFTRAFFICResume) Reset() {
	*x = HwRATEOFTRAFFICResume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R10_driver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwRATEOFTRAFFICResume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwRATEOFTRAFFICResume) ProtoMessage() {}

func (x *HwRATEOFTRAFFICResume) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R10_driver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwRATEOFTRAFFICResume.ProtoReflect.Descriptor instead.
func (*HwRATEOFTRAFFICResume) Descriptor() ([]byte, []int) {
	return file_huaweiV8R10_driver_proto_rawDescGZIP(), []int{8}
}

func (x *HwRATEOFTRAFFICResume) GetEntPhysicalIndex() uint32 {
	if x != nil {
		return x.EntPhysicalIndex
	}
	return 0
}

func (x *HwRATEOFTRAFFICResume) GetEntPhysicalName() string {
	if x != nil {
		return x.EntPhysicalName
	}
	return ""
}

func (x *HwRATEOFTRAFFICResume) GetEntityPhysicalIndex() uint32 {
	if x != nil {
		return x.EntityPhysicalIndex
	}
	return 0
}

func (x *HwRATEOFTRAFFICResume) GetEntityTrapFaultID() uint32 {
	if x != nil {
		return x.EntityTrapFaultID
	}
	return 0
}

func (x *HwRATEOFTRAFFICResume) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type HwRATEOFTRAFFICRising struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntPhysicalIndex    uint32 `protobuf:"varint,1,opt,name=EntPhysicalIndex,proto3" json:"EntPhysicalIndex,omitempty"`
	EntPhysicalName     string `protobuf:"bytes,2,opt,name=EntPhysicalName,proto3" json:"EntPhysicalName,omitempty"`
	EntityPhysicalIndex uint32 `protobuf:"varint,3,opt,name=EntityPhysicalIndex,proto3" json:"EntityPhysicalIndex,omitempty"`
	EntityTrapFaultID   uint32 `protobuf:"varint,4,opt,name=EntityTrapFaultID,proto3" json:"EntityTrapFaultID,omitempty"`
	Reason              string `protobuf:"bytes,5,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (x *HwRATEOFTRAFFICRising) Reset() {
	*x = HwRATEOFTRAFFICRising{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R10_driver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwRATEOFTRAFFICRising) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwRATEOFTRAFFICRising) ProtoMessage() {}

func (x *HwRATEOFTRAFFICRising) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R10_driver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwRATEOFTRAFFICRising.ProtoReflect.Descriptor instead.
func (*HwRATEOFTRAFFICRising) Descriptor() ([]byte, []int) {
	return file_huaweiV8R10_driver_proto_rawDescGZIP(), []int{9}
}

func (x *HwRATEOFTRAFFICRising) GetEntPhysicalIndex() uint32 {
	if x != nil {
		return x.EntPhysicalIndex
	}
	return 0
}

func (x *HwRATEOFTRAFFICRising) GetEntPhysicalName() string {
	if x != nil {
		return x.EntPhysicalName
	}
	return ""
}

func (x *HwRATEOFTRAFFICRising) GetEntityPhysicalIndex() uint32 {
	if x != nil {
		return x.EntityPhysicalIndex
	}
	return 0
}

func (x *HwRATEOFTRAFFICRising) GetEntityTrapFaultID() uint32 {
	if x != nil {
		return x.EntityTrapFaultID
	}
	return 0
}

func (x *HwRATEOFTRAFFICRising) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

var File_huaweiV8R10_driver_proto protoreflect.FileDescriptor

var file_huaweiV8R10_driver_proto_rawDesc = []byte{
	0x0a, 0x18, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x30, 0x2d, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x30, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x22, 0xfb,
	0x01, 0x0a, 0x0b, 0x48, 0x77, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x2a,
	0x0a, 0x10, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x6e,
	0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x72, 0x61, 0x70, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x70, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x81, 0x02, 0x0a,
	0x11, 0x48, 0x77, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x45, 0x6e,
	0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28,
	0x0a, 0x0f, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x70, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61,
	0x70, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0xfe, 0x01, 0x0a, 0x0e, 0x48, 0x77, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x45,
	0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x28, 0x0a, 0x0f, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x70, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x72,
	0x61, 0x70, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x84, 0x02, 0x0a, 0x14, 0x48, 0x77, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6e,
	0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x70,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x70, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xef, 0x02, 0x0a, 0x0f, 0x48, 0x77, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11,
	0x42, 0x61, 0x73, 0x65, 0x54, 0x72, 0x61, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x42, 0x61, 0x73, 0x65, 0x54, 0x72, 0x61,
	0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x61,
	0x73, 0x65, 0x54, 0x72, 0x61, 0x70, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x42, 0x61, 0x73, 0x65, 0x54, 0x72, 0x61, 0x70, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x45, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x62, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x75, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x75, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xee, 0x02, 0x0a, 0x0e, 0x48,
	0x77, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x42, 0x61, 0x73, 0x65, 0x54, 0x72, 0x61, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x42, 0x61, 0x73, 0x65, 0x54, 0x72,
	0x61, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x42,
	0x61, 0x73, 0x65, 0x54, 0x72, 0x61, 0x70, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x42, 0x61, 0x73, 0x65, 0x54, 0x72, 0x61, 0x70, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x45, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x12,
	0x28, 0x0a, 0x0f, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x75, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x75, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xf6, 0x01, 0x0a, 0x10,
	0x48, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x45, 0x6e, 0x74, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x0f,
	0x45, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x54, 0x72, 0x61, 0x70, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x70, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfc, 0x01, 0x0a, 0x16, 0x48, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x45, 0x6e, 0x74, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x45,
	0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x54, 0x72, 0x61, 0x70, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x70, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xe5, 0x01, 0x0a, 0x15, 0x48, 0x77, 0x52, 0x41, 0x54, 0x45, 0x4f, 0x46,
	0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x6e, 0x74,
	0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x72, 0x61, 0x70, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x70, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xe5, 0x01, 0x0a, 0x15,
	0x48, 0x77, 0x52, 0x41, 0x54, 0x45, 0x4f, 0x46, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x52,
	0x69, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x45, 0x6e, 0x74, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a,
	0x11, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x70, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x72, 0x61, 0x70, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_huaweiV8R10_driver_proto_rawDescOnce sync.Once
	file_huaweiV8R10_driver_proto_rawDescData = file_huaweiV8R10_driver_proto_rawDesc
)

func file_huaweiV8R10_driver_proto_rawDescGZIP() []byte {
	file_huaweiV8R10_driver_proto_rawDescOnce.Do(func() {
		file_huaweiV8R10_driver_proto_rawDescData = protoimpl.X.CompressGZIP(file_huaweiV8R10_driver_proto_rawDescData)
	})
	return file_huaweiV8R10_driver_proto_rawDescData
}

var file_huaweiV8R10_driver_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_huaweiV8R10_driver_proto_goTypes = []interface{}{
	(*HwBoardFail)(nil),            // 0: huaweiV8R10_driver.HwBoardFail
	(*HwBoardFailResume)(nil),      // 1: huaweiV8R10_driver.HwBoardFailResume
	(*HwBoardInvalid)(nil),         // 2: huaweiV8R10_driver.HwBoardInvalid
	(*HwBoardInvalidResume)(nil),   // 3: huaweiV8R10_driver.HwBoardInvalidResume
	(*HwEntityInvalid)(nil),        // 4: huaweiV8R10_driver.HwEntityInvalid
	(*HwEntityResume)(nil),         // 5: huaweiV8R10_driver.HwEntityResume
	(*HwOpticalInvalid)(nil),       // 6: huaweiV8R10_driver.HwOpticalInvalid
	(*HwOpticalInvalidResume)(nil), // 7: huaweiV8R10_driver.HwOpticalInvalidResume
	(*HwRATEOFTRAFFICResume)(nil),  // 8: huaweiV8R10_driver.HwRATEOFTRAFFICResume
	(*HwRATEOFTRAFFICRising)(nil),  // 9: huaweiV8R10_driver.HwRATEOFTRAFFICRising
}
var file_huaweiV8R10_driver_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_huaweiV8R10_driver_proto_init() }
func file_huaweiV8R10_driver_proto_init() {
	if File_huaweiV8R10_driver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_huaweiV8R10_driver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwBoardFail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R10_driver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwBoardFailResume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R10_driver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwBoardInvalid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R10_driver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwBoardInvalidResume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R10_driver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwEntityInvalid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R10_driver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwEntityResume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R10_driver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwOpticalInvalid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R10_driver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwOpticalInvalidResume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R10_driver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwRATEOFTRAFFICResume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R10_driver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwRATEOFTRAFFICRising); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_huaweiV8R10_driver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_huaweiV8R10_driver_proto_goTypes,
		DependencyIndexes: file_huaweiV8R10_driver_proto_depIdxs,
		MessageInfos:      file_huaweiV8R10_driver_proto_msgTypes,
	}.Build()
	File_huaweiV8R10_driver_proto = out.File
	file_huaweiV8R10_driver_proto_rawDesc = nil
	file_huaweiV8R10_driver_proto_goTypes = nil
	file_huaweiV8R10_driver_proto_depIdxs = nil
}
