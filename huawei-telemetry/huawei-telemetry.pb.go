// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: huawei-telemetry.proto

package huawei_telemetry

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Telemetry_Encoding int32

const (
	Telemetry_Encoding_GPB  Telemetry_Encoding = 0 //GPB encoding format.
	Telemetry_Encoding_JSON Telemetry_Encoding = 1 //JSON encoding format.
)

// Enum value maps for Telemetry_Encoding.
var (
	Telemetry_Encoding_name = map[int32]string{
		0: "Encoding_GPB",
		1: "Encoding_JSON",
	}
	Telemetry_Encoding_value = map[string]int32{
		"Encoding_GPB":  0,
		"Encoding_JSON": 1,
	}
)

func (x Telemetry_Encoding) Enum() *Telemetry_Encoding {
	p := new(Telemetry_Encoding)
	*p = x
	return p
}

func (x Telemetry_Encoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Telemetry_Encoding) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_telemetry_proto_enumTypes[0].Descriptor()
}

func (Telemetry_Encoding) Type() protoreflect.EnumType {
	return &file_huawei_telemetry_proto_enumTypes[0]
}

func (x Telemetry_Encoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Telemetry_Encoding.Descriptor instead.
func (Telemetry_Encoding) EnumDescriptor() ([]byte, []int) {
	return file_huawei_telemetry_proto_rawDescGZIP(), []int{0, 0}
}

type TelemetrySelfDefinedEvent_ThresholdRelation int32

const (
	TelemetrySelfDefinedEvent_ThresholdRelation_INVALID TelemetrySelfDefinedEvent_ThresholdRelation = 0 //The relationship between thresholds is not configured.
	TelemetrySelfDefinedEvent_ThresholdRelation_AND     TelemetrySelfDefinedEvent_ThresholdRelation = 1 //The relationship between thresholds is And.
	TelemetrySelfDefinedEvent_ThresholdRelation_OR      TelemetrySelfDefinedEvent_ThresholdRelation = 2 //The relationship between thresholds is Or.
)

// Enum value maps for TelemetrySelfDefinedEvent_ThresholdRelation.
var (
	TelemetrySelfDefinedEvent_ThresholdRelation_name = map[int32]string{
		0: "ThresholdRelation_INVALID",
		1: "ThresholdRelation_AND",
		2: "ThresholdRelation_OR",
	}
	TelemetrySelfDefinedEvent_ThresholdRelation_value = map[string]int32{
		"ThresholdRelation_INVALID": 0,
		"ThresholdRelation_AND":     1,
		"ThresholdRelation_OR":      2,
	}
)

func (x TelemetrySelfDefinedEvent_ThresholdRelation) Enum() *TelemetrySelfDefinedEvent_ThresholdRelation {
	p := new(TelemetrySelfDefinedEvent_ThresholdRelation)
	*p = x
	return p
}

func (x TelemetrySelfDefinedEvent_ThresholdRelation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TelemetrySelfDefinedEvent_ThresholdRelation) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_telemetry_proto_enumTypes[1].Descriptor()
}

func (TelemetrySelfDefinedEvent_ThresholdRelation) Type() protoreflect.EnumType {
	return &file_huawei_telemetry_proto_enumTypes[1]
}

func (x TelemetrySelfDefinedEvent_ThresholdRelation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TelemetrySelfDefinedEvent_ThresholdRelation.Descriptor instead.
func (TelemetrySelfDefinedEvent_ThresholdRelation) EnumDescriptor() ([]byte, []int) {
	return file_huawei_telemetry_proto_rawDescGZIP(), []int{3, 0}
}

type TelemetryThreshold_ThresholdOpType int32

const (
	TelemetryThreshold_ThresholdOpType_EQ TelemetryThreshold_ThresholdOpType = 0 //The actual value in the data sent equals to the configured data threshold.
	TelemetryThreshold_ThresholdOpType_GT TelemetryThreshold_ThresholdOpType = 1 //The actual value in the data sent is greater than the configured data threshold.
	TelemetryThreshold_ThresholdOpType_GE TelemetryThreshold_ThresholdOpType = 2 //The actual value in the data sent is greater than or equals to the configured data threshold.
	TelemetryThreshold_ThresholdOpType_LT TelemetryThreshold_ThresholdOpType = 3 //The actual value in the data sent is less than the configured data threshold.
	TelemetryThreshold_ThresholdOpType_LE TelemetryThreshold_ThresholdOpType = 4 //The actual value in the data sent is less than or equals to the configured data threshold.
)

// Enum value maps for TelemetryThreshold_ThresholdOpType.
var (
	TelemetryThreshold_ThresholdOpType_name = map[int32]string{
		0: "ThresholdOpType_EQ",
		1: "ThresholdOpType_GT",
		2: "ThresholdOpType_GE",
		3: "ThresholdOpType_LT",
		4: "ThresholdOpType_LE",
	}
	TelemetryThreshold_ThresholdOpType_value = map[string]int32{
		"ThresholdOpType_EQ": 0,
		"ThresholdOpType_GT": 1,
		"ThresholdOpType_GE": 2,
		"ThresholdOpType_LT": 3,
		"ThresholdOpType_LE": 4,
	}
)

func (x TelemetryThreshold_ThresholdOpType) Enum() *TelemetryThreshold_ThresholdOpType {
	p := new(TelemetryThreshold_ThresholdOpType)
	*p = x
	return p
}

func (x TelemetryThreshold_ThresholdOpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TelemetryThreshold_ThresholdOpType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_telemetry_proto_enumTypes[2].Descriptor()
}

func (TelemetryThreshold_ThresholdOpType) Type() protoreflect.EnumType {
	return &file_huawei_telemetry_proto_enumTypes[2]
}

func (x TelemetryThreshold_ThresholdOpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TelemetryThreshold_ThresholdOpType.Descriptor instead.
func (TelemetryThreshold_ThresholdOpType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_telemetry_proto_rawDescGZIP(), []int{5, 0}
}

type Telemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIdStr           string             `protobuf:"bytes,1,opt,name=node_id_str,json=nodeIdStr,proto3" json:"node_id_str,omitempty"`                                //Device name.
	SubscriptionIdStr   string             `protobuf:"bytes,2,opt,name=subscription_id_str,json=subscriptionIdStr,proto3" json:"subscription_id_str,omitempty"`        //Subscription name during static subscription configuration, whose index is 2 during GPB encoding.
	SensorPath          string             `protobuf:"bytes,3,opt,name=sensor_path,json=sensorPath,proto3" json:"sensor_path,omitempty"`                               //Subscription path, whose index is 3 during GPB encoding.
	CollectionId        uint64             `protobuf:"varint,4,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`                        //Sampling round, whose index is 4 during GPB encoding.
	CollectionStartTime uint64             `protobuf:"varint,5,opt,name=collection_start_time,json=collectionStartTime,proto3" json:"collection_start_time,omitempty"` //Start time of a sampling round, whose index is 5 during GPB encoding.
	MsgTimestamp        uint64             `protobuf:"varint,6,opt,name=msg_timestamp,json=msgTimestamp,proto3" json:"msg_timestamp,omitempty"`                        //Timestamp when the current message is generated, whose index is 6 during GPB encoding.
	DataGpb             *TelemetryGPBTable `protobuf:"bytes,7,opt,name=data_gpb,json=dataGpb,proto3" json:"data_gpb,omitempty"`                                        //Indicates that the data carried is defined in TelemetryGPBTable. The index is 7 during GPB encoding.
	CollectionEndTime   uint64             `protobuf:"varint,8,opt,name=collection_end_time,json=collectionEndTime,proto3" json:"collection_end_time,omitempty"`       //End time of a sampling round, whose index is 8 during GPB encoding.
	CurrentPeriod       uint32             `protobuf:"varint,9,opt,name=current_period,json=currentPeriod,proto3" json:"current_period,omitempty"`                     //Sampling precision, in milliseconds, whose index is 9 during GPB encoding.
	ExceptDesc          string             `protobuf:"bytes,10,opt,name=except_desc,json=exceptDesc,proto3" json:"except_desc,omitempty"`                              //Exception description, whose index is 10 during GPB encoding. It is used to report exception information when a sampling exception occurs.
	ProductName         string             `protobuf:"bytes,11,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`                           //Product name.
	Encoding            Telemetry_Encoding `protobuf:"varint,12,opt,name=encoding,proto3,enum=huawei_telemetry.Telemetry_Encoding" json:"encoding,omitempty"`          //Data encoding format. If the GPB encoding format is used, the data_gpb field is valid. Otherwise, the data_str field is valid.
	DataStr             string             `protobuf:"bytes,14,opt,name=data_str,json=dataStr,proto3" json:"data_str,omitempty"`                                       //This field is valid only when a non-GPB encoding format is used.
}

func (x *Telemetry) Reset() {
	*x = Telemetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_telemetry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Telemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telemetry) ProtoMessage() {}

func (x *Telemetry) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_telemetry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telemetry.ProtoReflect.Descriptor instead.
func (*Telemetry) Descriptor() ([]byte, []int) {
	return file_huawei_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *Telemetry) GetNodeIdStr() string {
	if x != nil {
		return x.NodeIdStr
	}
	return ""
}

func (x *Telemetry) GetSubscriptionIdStr() string {
	if x != nil {
		return x.SubscriptionIdStr
	}
	return ""
}

func (x *Telemetry) GetSensorPath() string {
	if x != nil {
		return x.SensorPath
	}
	return ""
}

func (x *Telemetry) GetCollectionId() uint64 {
	if x != nil {
		return x.CollectionId
	}
	return 0
}

func (x *Telemetry) GetCollectionStartTime() uint64 {
	if x != nil {
		return x.CollectionStartTime
	}
	return 0
}

func (x *Telemetry) GetMsgTimestamp() uint64 {
	if x != nil {
		return x.MsgTimestamp
	}
	return 0
}

func (x *Telemetry) GetDataGpb() *TelemetryGPBTable {
	if x != nil {
		return x.DataGpb
	}
	return nil
}

func (x *Telemetry) GetCollectionEndTime() uint64 {
	if x != nil {
		return x.CollectionEndTime
	}
	return 0
}

func (x *Telemetry) GetCurrentPeriod() uint32 {
	if x != nil {
		return x.CurrentPeriod
	}
	return 0
}

func (x *Telemetry) GetExceptDesc() string {
	if x != nil {
		return x.ExceptDesc
	}
	return ""
}

func (x *Telemetry) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *Telemetry) GetEncoding() Telemetry_Encoding {
	if x != nil {
		return x.Encoding
	}
	return Telemetry_Encoding_GPB
}

func (x *Telemetry) GetDataStr() string {
	if x != nil {
		return x.DataStr
	}
	return ""
}

type TelemetryGPBTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row []*TelemetryRowGPB `protobuf:"bytes,1,rep,name=row,proto3" json:"row,omitempty"` //Array definition, whose index is 1 during GPB encoding. Its member is TelemetryRowGPB structure.
}

func (x *TelemetryGPBTable) Reset() {
	*x = TelemetryGPBTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_telemetry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryGPBTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryGPBTable) ProtoMessage() {}

func (x *TelemetryGPBTable) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_telemetry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryGPBTable.ProtoReflect.Descriptor instead.
func (*TelemetryGPBTable) Descriptor() ([]byte, []int) {
	return file_huawei_telemetry_proto_rawDescGZIP(), []int{1}
}

func (x *TelemetryGPBTable) GetRow() []*TelemetryRowGPB {
	if x != nil {
		return x.Row
	}
	return nil
}

type TelemetryRowGPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` //Timestamp of the current sampling instance, whose index is 1 during GPB encoding.
	Content   []byte `protobuf:"bytes,11,opt,name=content,proto3" json:"content,omitempty"`     //Sampling instance data carried, whose index is 11 during GPB encoding. The sensor_path field must be considered to determine which .proto file is used for encoding.
}

func (x *TelemetryRowGPB) Reset() {
	*x = TelemetryRowGPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_telemetry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryRowGPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryRowGPB) ProtoMessage() {}

func (x *TelemetryRowGPB) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_telemetry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryRowGPB.ProtoReflect.Descriptor instead.
func (*TelemetryRowGPB) Descriptor() ([]byte, []int) {
	return file_huawei_telemetry_proto_rawDescGZIP(), []int{2}
}

func (x *TelemetryRowGPB) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TelemetryRowGPB) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type TelemetrySelfDefinedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path              string                                      `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                                                                                              //Sampling path that triggers the customized event, which describes the method of parsing the content.
	Level             uint32                                      `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                                                                                           //Level of the user-defined event.
	Description       string                                      `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                                                                //Description of the user-defined event.
	FieldName         string                                      `protobuf:"bytes,4,opt,name=fieldName,proto3" json:"fieldName,omitempty"`                                                                                    //Name of the field that triggers the customized event.
	FieldValue        uint32                                      `protobuf:"varint,5,opt,name=fieldValue,proto3" json:"fieldValue,omitempty"`                                                                                 //Value of the field that triggers the customized event.
	DataThreshold     *TelemetrySelfDefineThresTable              `protobuf:"bytes,6,opt,name=data_threshold,json=dataThreshold,proto3" json:"data_threshold,omitempty"`                                                       //Threshold filter criteria when the customized event is triggered.
	ThresholdRelation TelemetrySelfDefinedEvent_ThresholdRelation `protobuf:"varint,7,opt,name=thresholdRelation,proto3,enum=huawei_telemetry.TelemetrySelfDefinedEvent_ThresholdRelation" json:"thresholdRelation,omitempty"` //Relationship between threshold filter criteria when the customized event is triggered.
	Content           []byte                                      `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`                                                                                        //Sampled data that triggers the customized event.
}

func (x *TelemetrySelfDefinedEvent) Reset() {
	*x = TelemetrySelfDefinedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_telemetry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySelfDefinedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySelfDefinedEvent) ProtoMessage() {}

func (x *TelemetrySelfDefinedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_telemetry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySelfDefinedEvent.ProtoReflect.Descriptor instead.
func (*TelemetrySelfDefinedEvent) Descriptor() ([]byte, []int) {
	return file_huawei_telemetry_proto_rawDescGZIP(), []int{3}
}

func (x *TelemetrySelfDefinedEvent) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TelemetrySelfDefinedEvent) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *TelemetrySelfDefinedEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TelemetrySelfDefinedEvent) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *TelemetrySelfDefinedEvent) GetFieldValue() uint32 {
	if x != nil {
		return x.FieldValue
	}
	return 0
}

func (x *TelemetrySelfDefinedEvent) GetDataThreshold() *TelemetrySelfDefineThresTable {
	if x != nil {
		return x.DataThreshold
	}
	return nil
}

func (x *TelemetrySelfDefinedEvent) GetThresholdRelation() TelemetrySelfDefinedEvent_ThresholdRelation {
	if x != nil {
		return x.ThresholdRelation
	}
	return TelemetrySelfDefinedEvent_ThresholdRelation_INVALID
}

func (x *TelemetrySelfDefinedEvent) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type TelemetrySelfDefineThresTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row []*TelemetryThreshold `protobuf:"bytes,1,rep,name=row,proto3" json:"row,omitempty"` //Multiple thresholds are included.
}

func (x *TelemetrySelfDefineThresTable) Reset() {
	*x = TelemetrySelfDefineThresTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_telemetry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySelfDefineThresTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySelfDefineThresTable) ProtoMessage() {}

func (x *TelemetrySelfDefineThresTable) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_telemetry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySelfDefineThresTable.ProtoReflect.Descriptor instead.
func (*TelemetrySelfDefineThresTable) Descriptor() ([]byte, []int) {
	return file_huawei_telemetry_proto_rawDescGZIP(), []int{4}
}

func (x *TelemetrySelfDefineThresTable) GetRow() []*TelemetryThreshold {
	if x != nil {
		return x.Row
	}
	return nil
}

type TelemetryThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThresholdValue  uint32                             `protobuf:"varint,1,opt,name=thresholdValue,proto3" json:"thresholdValue,omitempty"`                                                            //Delivered threshold.
	ThresholdOpType TelemetryThreshold_ThresholdOpType `protobuf:"varint,2,opt,name=thresholdOpType,proto3,enum=huawei_telemetry.TelemetryThreshold_ThresholdOpType" json:"thresholdOpType,omitempty"` //Threshold on the device.
}

func (x *TelemetryThreshold) Reset() {
	*x = TelemetryThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_telemetry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryThreshold) ProtoMessage() {}

func (x *TelemetryThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_telemetry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryThreshold.ProtoReflect.Descriptor instead.
func (*TelemetryThreshold) Descriptor() ([]byte, []int) {
	return file_huawei_telemetry_proto_rawDescGZIP(), []int{5}
}

func (x *TelemetryThreshold) GetThresholdValue() uint32 {
	if x != nil {
		return x.ThresholdValue
	}
	return 0
}

func (x *TelemetryThreshold) GetThresholdOpType() TelemetryThreshold_ThresholdOpType {
	if x != nil {
		return x.ThresholdOpType
	}
	return TelemetryThreshold_ThresholdOpType_EQ
}

var File_huawei_telemetry_proto protoreflect.FileDescriptor

var file_huawei_telemetry_proto_rawDesc = []byte{
	0x0a, 0x16, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x2d, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x22, 0xe3, 0x04, 0x0a, 0x09, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x73, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x67, 0x70, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x47, 0x50, 0x42, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x47, 0x70, 0x62, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x22,
	0x2f, 0x0a, 0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x0c, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x50, 0x42, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x01,
	0x22, 0x48, 0x0a, 0x11, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x47, 0x50, 0x42,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52,
	0x6f, 0x77, 0x47, 0x50, 0x42, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x22, 0x49, 0x0a, 0x0f, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x47, 0x50, 0x42, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xed, 0x03, 0x0a, 0x19, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x53, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x56, 0x0a,
	0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x53, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x6b, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x65, 0x6c,
	0x66, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x67, 0x0a, 0x11,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x19, 0x0a, 0x15, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x4f, 0x52, 0x10, 0x02, 0x22, 0x57, 0x0a, 0x1d, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x53, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x22, 0xa8,
	0x02, 0x0a, 0x12, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5e, 0x0a,
	0x0f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2e, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x89, 0x01,
	0x0a, 0x0f, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4f, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4f, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x51, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x54, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4f, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x54, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4f, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x45, 0x10, 0x04, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_huawei_telemetry_proto_rawDescOnce sync.Once
	file_huawei_telemetry_proto_rawDescData = file_huawei_telemetry_proto_rawDesc
)

func file_huawei_telemetry_proto_rawDescGZIP() []byte {
	file_huawei_telemetry_proto_rawDescOnce.Do(func() {
		file_huawei_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(file_huawei_telemetry_proto_rawDescData)
	})
	return file_huawei_telemetry_proto_rawDescData
}

var file_huawei_telemetry_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_huawei_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_huawei_telemetry_proto_goTypes = []interface{}{
	(Telemetry_Encoding)(0),                          // 0: huawei_telemetry.Telemetry.Encoding
	(TelemetrySelfDefinedEvent_ThresholdRelation)(0), // 1: huawei_telemetry.TelemetrySelfDefinedEvent.ThresholdRelation
	(TelemetryThreshold_ThresholdOpType)(0),          // 2: huawei_telemetry.TelemetryThreshold.ThresholdOpType
	(*Telemetry)(nil),                                // 3: huawei_telemetry.Telemetry
	(*TelemetryGPBTable)(nil),                        // 4: huawei_telemetry.TelemetryGPBTable
	(*TelemetryRowGPB)(nil),                          // 5: huawei_telemetry.TelemetryRowGPB
	(*TelemetrySelfDefinedEvent)(nil),                // 6: huawei_telemetry.TelemetrySelfDefinedEvent
	(*TelemetrySelfDefineThresTable)(nil),            // 7: huawei_telemetry.TelemetrySelfDefineThresTable
	(*TelemetryThreshold)(nil),                       // 8: huawei_telemetry.TelemetryThreshold
}
var file_huawei_telemetry_proto_depIdxs = []int32{
	4, // 0: huawei_telemetry.Telemetry.data_gpb:type_name -> huawei_telemetry.TelemetryGPBTable
	0, // 1: huawei_telemetry.Telemetry.encoding:type_name -> huawei_telemetry.Telemetry.Encoding
	5, // 2: huawei_telemetry.TelemetryGPBTable.row:type_name -> huawei_telemetry.TelemetryRowGPB
	7, // 3: huawei_telemetry.TelemetrySelfDefinedEvent.data_threshold:type_name -> huawei_telemetry.TelemetrySelfDefineThresTable
	1, // 4: huawei_telemetry.TelemetrySelfDefinedEvent.thresholdRelation:type_name -> huawei_telemetry.TelemetrySelfDefinedEvent.ThresholdRelation
	8, // 5: huawei_telemetry.TelemetrySelfDefineThresTable.row:type_name -> huawei_telemetry.TelemetryThreshold
	2, // 6: huawei_telemetry.TelemetryThreshold.thresholdOpType:type_name -> huawei_telemetry.TelemetryThreshold.ThresholdOpType
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_huawei_telemetry_proto_init() }
func file_huawei_telemetry_proto_init() {
	if File_huawei_telemetry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_huawei_telemetry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Telemetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_telemetry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryGPBTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_telemetry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryRowGPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_telemetry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySelfDefinedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_telemetry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySelfDefineThresTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_telemetry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_huawei_telemetry_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_huawei_telemetry_proto_goTypes,
		DependencyIndexes: file_huawei_telemetry_proto_depIdxs,
		EnumInfos:         file_huawei_telemetry_proto_enumTypes,
		MessageInfos:      file_huawei_telemetry_proto_msgTypes,
	}.Build()
	File_huawei_telemetry_proto = out.File
	file_huawei_telemetry_proto_rawDesc = nil
	file_huawei_telemetry_proto_goTypes = nil
	file_huawei_telemetry_proto_depIdxs = nil
}
